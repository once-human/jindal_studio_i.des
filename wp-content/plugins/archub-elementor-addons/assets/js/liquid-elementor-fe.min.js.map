{"version":3,"sources":["../src/frontend/ui-theme/ui-theme.js","../src/frontend/header/simulator/model/simulator.js","../src/frontend/header/simulator/view/simulator.js","../src/frontend/hooks/section.js","../src/liquid-elementor-fe.js","../src/frontend/liquid-page-refresh.js"],"names":["LqdUITheme","elementorModules","ViewModule","getDefaultSettings","editorPreferencesModel","elementor","settings","editorPreferences","model","darkModeLinkID","getDefaultElements","this","getSettings","$darkModeLink","jQuery","bindEvents","on","checkStyle","onInit","super","$link","createLink","elements","length","id","rel","href","attr","get","remove","timeout","setTimeout","appendTo","elementorCommon","$body","clearTimeout","HeaderSimulatorModel","Backbone","Model","extend","defaults","isStuck","isOverLight","isOverDark","currentBgColor","backgrounds","light","dark","classnames","stickyHeader","overLightRow","overDarktRow","selectors","mainHeader","dynamicColorElements","HeaderSimulatorView","View","template","_","events","$mainHeader","initialize","render","$el","listenTo","onStuckChange","onSchemeChange","html","simSticky","ev","set","currentTarget","classList","toggle","setBgColor","event","bgColor","dataset","setScheme","scheme","newStickyState","getMainHeader","toggleClass","lightBgColor","darkBgColor","changed","$dynamicColorElements","elementorFrontend","$document","find","getBody","removeClass","add","css","addClass","LqdColumnsWrap","Marionette","Behavior","defer","view","onColumnWrapChange","handleResize","liquid_columns_wrap","columnWrap","resizeHooks","forEach","hook","$e","hooks","data","callbacksFlatList","deactivate","activate","$","addFilter","behaviors","sectionView","liquidColumnsWrap","behaviorClass","adjustColumns","preset","presetsFactory","getPresetByStructure","getStructure","children","each","columnView","index","container","getContainer","run","_column_size","_inline_size","window","isHeaderPost","ElementorConfig","document","urls","permalink","search","isFooterPost","headerSimModel","channels","editor","async","$lqdRefreshBtn","saver","isEditorChanged","removeAttr","force","reloadPreview","once","route","lqdPageReload"],"mappings":"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","sourcesContent":["class LqdUITheme extends elementorModules.ViewModule {\n  \n  getDefaultSettings() {\n    \n    return {\n      editorPreferencesModel: elementor.settings.editorPreferences.model,\n      darkModeLinkID: 'liquid-elementor-editor-style-dark-css'\n    }\n\n  }\n  \n  getDefaultElements() {\n\n    const darkModeLinkID = this.getSettings('darkModeLinkID');\n    \n    return {\n      $darkModeLink: jQuery(`#${darkModeLinkID}`)\n    }\n\n  }\n  \n  bindEvents() {\n    \n    const editorPreferencesModel = this.getSettings('editorPreferencesModel');\n\n    editorPreferencesModel.on('change:ui_theme', this.checkStyle, this);\n    \n  }\n\n  onInit() {\n\n    super.onInit();\n\n    this.$link = this.createLink();\n    this.checkStyle();\n\n  }\n\n  createLink() {\n\n    if ( this.elements.$darkModeLink.length ) {\n      return this.elements.$darkModeLink;\n    }\n    \n    return jQuery( '<link>', {\n      id: this.getSettings('darkModeLinkID'),\n      rel: 'stylesheet',\n      href: this.elements.$darkModeLink.attr('href')\n    } );\n\n  }\n\n  checkStyle() {\n\n    const editorPreferencesModel = this.getSettings('editorPreferencesModel');\n\n    if ( 'light' === editorPreferencesModel.get('ui_theme') ) {\n      this.$link.remove();\n      return;\n    }\n    \n    let timeout = setTimeout( () => {\n      this.$link.attr( 'media', 'auto' === editorPreferencesModel.get('ui_theme') ? '(prefers-color-scheme: dark)' : '' ).appendTo( elementorCommon.elements.$body );\n      clearTimeout(timeout);\n    }, 150)\n    \n  }\n  \n}\n\nexport default LqdUITheme;","const HeaderSimulatorModel = Backbone.Model.extend({\n\n  defaults: {\n    isStuck: false,\n    isOverLight: false,\n    isOverDark: false,\n    currentBgColor: null,\n    backgrounds: {\n      light: '#fff',\n      dark: '#1a1a1a'\n    },\n    classnames: {\n      stickyHeader: 'is-stuck',\n      overLightRow: 'lqd-active-row-light',\n      overDarktRow: 'lqd-active-row-dark'\n    },\n    selectors: {\n      mainHeader: '.main-header',\n      dynamicColorElements: '.main-header, .main-header > .elementor > .elementor-section > .elementor-container > .elementor-column > .elementor-widget-wrap > .elementor-element'\n    }\n  }\n\n});\n\nexport default HeaderSimulatorModel;","const HeaderSimulatorView = Backbone.View.extend({\n\n  id: 'lqd-header-sim-states',\n\n  template: _.template(`<div class=\"lqd-header-sim-title\"><h3>Simulator</h3></div><button id=\"lqd-header-sim-sticky\" class=\"lqd-header-sim-btn\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-credit-card\"><rect x=\"1\" y=\"4\" width=\"22\" height=\"16\" rx=\"2\" ry=\"2\"/><rect x=\"1\" y=\"4\" width=\"22\" height=\"7\" rx=\"2\" ry=\"2\" fill=\"currentColor\" stroke=\"none\"></rect></svg><span>Sticky</span></button>\n  <button id=\"lqd-header-sim-light-bg\" class=\"lqd-header-sim-btn\" data-scheme=\"light\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-sun\"><circle cx=\"12\" cy=\"12\" r=\"5\"/><line x1=\"12\" y1=\"1\" x2=\"12\" y2=\"3\"/><line x1=\"12\" y1=\"21\" x2=\"12\" y2=\"23\"/><line x1=\"4.22\" y1=\"4.22\" x2=\"5.64\" y2=\"5.64\"/><line x1=\"18.36\" y1=\"18.36\" x2=\"19.78\" y2=\"19.78\"/><line x1=\"1\" y1=\"12\" x2=\"3\" y2=\"12\"/><line x1=\"21\" y1=\"12\" x2=\"23\" y2=\"12\"/><line x1=\"4.22\" y1=\"19.78\" x2=\"5.64\" y2=\"18.36\"/><line x1=\"18.36\" y1=\"5.64\" x2=\"19.78\" y2=\"4.22\"/></svg><span>Light</span></button>\n  <button id=\"lqd-header-sim-dark-bg\" class=\"lqd-header-sim-btn\" data-scheme=\"dark\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-moon\"><path d=\"M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z\"/></svg><span>Dark</span></button>\n  <button id=\"lqd-header-sim-reset-bg\" class=\"lqd-header-sim-btn\" data-scheme=\"reset\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"feather feather-rotate-ccw\"><polyline points=\"1 4 1 10 7 10\"/><path d=\"M3.51 15a9 9 0 1 0 2.13-9.36L1 10\"/></svg><span>Reset</span></button>`),\n\n  events: {\n    'click #lqd-header-sim-sticky': 'simSticky',\n    'click #lqd-header-sim-light-bg, #lqd-header-sim-dark-bg, #lqd-header-sim-reset-bg': 'setScheme',\n  },\n\n  $body: null,\n  $mainHeader: null,\n\n  initialize: function() {\n\n    this.render();\n\n    this.$el.appendTo('body');\n\n    this.listenTo(this.model, 'change:isStuck', this.onStuckChange);\n    this.listenTo(this.model, 'change:isOverLight', this.onSchemeChange);\n    this.listenTo(this.model, 'change:isOverDark', this.onSchemeChange);\n    \n  },\n\n  render: function() {\n\n    this.$el.html(this.template());\n\n    return this;\n\n  },\n\n  simSticky: function(ev) {\n\n    this.model.set('isStuck', ! this.model.get('isStuck'));\n\n    ev.currentTarget.classList.toggle('active', this.model.get('isStuck'));\n\n  },\n\n  setBgColor: function(event) {\n    const bgColor = event.currentTarget.dataset.bgColor;\n    this.model.set('currentBgColor', bgColor);\n  },\n\n  setScheme: function(event) {\n\n    const button = event.currentTarget;\n    const scheme = button.dataset.scheme;\n\n    switch (scheme) {\n      case 'light':\n        this.model.set({\n          isOverLight: true,\n          isOverDark: false\n        });\n        break;\n      case 'dark':\n        this.model.set({\n          isOverLight: false,\n          isOverDark: true\n        });\n        break;\n      default:\n        this.model.set({\n          isOverLight: false,\n          isOverDark: false\n        });\n    }\n\n  },\n\n  onStuckChange: function(model, newStickyState) {\n\n    const {stickyHeader} = this.model.get('classnames');\n    const $mainHeader = this.getMainHeader();\n\n    $mainHeader.toggleClass(stickyHeader, newStickyState);\n    \n  },\n\n  onSchemeChange: function() {\n\n    const {overLightRow, overDarktRow} = this.model.get('classnames');\n    const {dynamicColorElements} = this.model.get('selectors');\n    const {light: lightBgColor, dark: darkBgColor} = this.model.get('backgrounds');\n    const {changed} = this.model;\n    const $dynamicColorElements = elementorFrontend.elements.$document.find(dynamicColorElements);\n    const $body = this.getBody();\n\n    this.$el.find('[data-scheme]').removeClass('active');\n\n    $dynamicColorElements.add(this.$el).removeClass([overLightRow, overDarktRow]);\n    $body.css('background-color', '');\n    \n    if ( changed.isOverLight ) {\n      $dynamicColorElements.add(this.$el).addClass(overLightRow);\n      $body.css('background-color', lightBgColor);\n      this.$el.find('[data-scheme=light]').addClass('active');\n    }\n    if ( changed.isOverDark ) {\n      $dynamicColorElements.add(this.$el).addClass(overDarktRow);\n      $body.css('background-color', darkBgColor);\n      this.$el.find('[data-scheme=dark]').addClass('active');\n    }\n    \n  },\n\n  getMainHeader() {\n\n    if ( this.$mainHeader ) {\n      return this.$mainHeader;\n    }\n\n    const {mainHeader} = this.model.get('selectors');\n\n    return elementorFrontend.elements.$document.find(mainHeader);\n    \n  },\n\n  getBody() {\n\n    if ( this.$body ) {\n      return this.$body;\n    }\n\n    return elementorFrontend.elements.$body;\n\n  }\n\n});\n\nexport default HeaderSimulatorView;","class LqdColumnsWrap extends Marionette.Behavior {\n\n  initialize() {\n\n    super.initialize();\n\n    _.defer(() => {\n      const settings = this.view.model.get('settings');\n      this.listenTo(settings, 'change:liquid_columns_wrap', this.onColumnWrapChange);\n      this.handleResize(settings.get('liquid_columns_wrap'));\n    })\n\n  }\n\n  onColumnWrapChange({changed}) {\n\n    this.handleResize(changed.liquid_columns_wrap);\n    \n  }\n\n  handleResize(columnWrap) {\n\n    const resizeHooks = ['resize-column', 'resize-column-limit'];\n\n    if ( columnWrap === 'yes' ) {\n      resizeHooks.forEach(hook => {\n        $e.hooks.data.callbacksFlatList[hook].deactivate()\n      })\n    } else {\n      resizeHooks.forEach(hook => {\n        $e.hooks.data.callbacksFlatList[hook].activate()\n      })\n    }\n\n  }\n\n}\n\nelementor.hooks.addFilter('elements/section/behaviors', (behaviors, sectionView) => {\n\n    behaviors.liquidColumnsWrap = {\n      behaviorClass: LqdColumnsWrap\n    };\n\n    sectionView.adjustColumns = function() {\n      \n      if ( this.model.get(\"settings\").get(\"liquid_columns_wrap\") === \"yes\" ) return;\n  \n      const preset = elementor.presetsFactory.getPresetByStructure( this.getStructure() );\n      \n      this.children.each( ( columnView, index ) => {\n        const container = columnView.getContainer();\n        \n        $e.run( 'document/elements/settings', {\n          container,\n          settings: {\n            _column_size: preset.preset[ index ],\n            _inline_size: null,\n          },\n        } );\n      });\n    };\n\n    return behaviors;\n\n});","import LqdUITheme from './frontend/ui-theme/ui-theme';\nimport HeaderSimulatorModel from './frontend/header/simulator/model/simulator';\nimport HeaderSimulatorView from './frontend/header/simulator/view/simulator';\n\nimport lqdPageReload from './frontend/liquid-page-refresh';\n\nimport './frontend/hooks/global';\nimport './frontend/hooks/section';\n\n(($) => {\n\n  $(window).on( 'load', () => {\n\n    _.defer(() => {\n      \n      const $body = $('body');\n      const isHeaderPost = ElementorConfig.document.urls.permalink.search(/liquid-header/g) >= 0;\n      const isFooterPost = ElementorConfig.document.urls.permalink.search(/liquid-footer/g) >= 0;\n      \n      if ( isHeaderPost ) {\n        \n        $body.addClass('single-liquid-header');\n        \n        const headerSimModel = new HeaderSimulatorModel();\n        new HeaderSimulatorView({model: headerSimModel});\n        \n      };\n      \n      if ( isFooterPost ) {\n        $body.addClass('single-liquid-footer');\n      }\n  \n      new LqdUITheme();\n  \n      lqdPageReload($);\n\n    })\n    \n  });\n\n})(jQuery);","export default function lqdPageRefresh($) {\n\n  elementor.channels.editor.on( 'lqd_page_refresh', async () => {\n\n    const $lqdRefreshBtn = $('.liquid-page-refresh');\n  \n    $lqdRefreshBtn.attr('disabled', true);\n\n    if ( ! elementor.saver.isEditorChanged() ) {\n\t\t\t_.defer(() => {\n        $lqdRefreshBtn.removeAttr( 'disabled' );\n      });\n\t\t}\n  \n    await $e.run('document/save/update', { force: true });\n\n    elementor.reloadPreview();\n    elementor.once( 'preview:loaded', () => {\n      _.defer(() => {\n        $lqdRefreshBtn.removeAttr( 'disabled' );\n        $e.route( 'panel/page-settings/settings' )\n      });\n    });\n\n  });\n\n}\n"]}